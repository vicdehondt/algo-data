#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*              Priority Queues (Heap Implementation)              *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universitent Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (priority-queue)
 (export new priority-queue? enqueue! peek serve! full? empty?)
 (import (rnrs base (6))
         (prefix (a-d heap standard) heap:))
 
 (define pq-item-make cons)
 (define pq-item-val car)
 (define pq-item-priority cdr)
 (define (pq-item-specialize-for-priorities func)
   (lambda (item1 item2)
     (func (pq-item-priority item1)
           (pq-item-priority item2))))
 
 (define default-size 50)
 (define pq-tag 'heap-pq)
 (define (make >>?)
   (list pq-tag (heap:new default-size >>?)))
 (define (heap pq)
   (cadr pq))
 
 (define (new >>?)
   (make (pq-item-specialize-for-priorities >>?)))
 
 (define (priority-queue? any)
   (and (pair? any)
        (eq? (car any) pq-tag)))
 
 (define (empty? pq)
   (heap:empty? (heap pq)))
 
 (define (full? pq)
   (heap:full? (heap pq)))
 
 (define (serve! pq)
   (if (empty? pq)
     (error "empty priority queue (serve!)" pq)
     (pq-item-val (heap:delete! (heap pq)))))
 
 (define (peek pq)
   (if (empty? pq)
     (error "empty priority queue (peek)" pq)
     (pq-item-val (heap:peek (heap pq)))))
 
 (define (enqueue! pq value pty)
   (heap:insert! (heap pq) (pq-item-make value pty))
   pq))