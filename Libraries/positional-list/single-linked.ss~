#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                    Linked Positional Lists                      *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library 
 (linked-positional-list)
 (export new positional-list-tag equality
         attach-first! attach-last! attach-middle!
         detach-first! detach-last! detach-middle!
         length empty? full? update! peek
         first last has-next? has-previous? next previous)
 (import (except (rnrs base (6)) length)
         (rnrs mutable-pairs))
 
 (define (make-list-node val next)
   (cons val next))
 (define (list-node-val node)
   (car node))
 (define (list-node-val! node val)
   (set-car! node val))
 (define (list-node-next node)
   (cdr node))
 (define (list-node-next! node next)
   (set-cdr! node next))
 
 (define positional-list-tag 'single-linked-list)
 (define (make head ==?)
   (list positional-list-tag head ==?))
 (define (head plst)
   (cadr plst))
 (define (head! plst node)
   (set-car! (cdr plst) node))
 (define (equality plst)
   (caddr plst))
 (define (new ==?)
   (make '() ==?))
 
 (define (iter-from-head-until plist stop?)
   (define first (head plist))
   (let chasing-pointers 
     ((prev '())
      (next first))
     (if (stop? next)
       prev
       (chasing-pointers next (list-node-next next)))))
 
 (define (attach-first! plst val)
   (define first (head plst))
   (define node (make-list-node val first))
   (head! plst node))
 
 (define (attach-middle! plst val pos)
   (define next (list-node-next pos))
   (define node (make-list-node val next))
   (list-node-next! pos node))
 
 (define (attach-last! plst val)
   (define last (iter-from-head-until plst null?))
   (define node (make-list-node val '()))
   (define first (head plst))
   (if (null? first)
     (head! plst node) ; last is also first
     (list-node-next! last node)))

 (define (detach-first! plst)
   (define first (head plst))
   (define second (list-node-next first))
   (head! plst second))
 
 (define (detach-middle! plst pos)
   (define next (list-node-next pos))
   (define prev (iter-from-head-until plst (lambda (node) (eq? pos node))))
   (list-node-next! prev next))
 
 (define (detach-last! plst pos)
   (define first (head plst))
   (define second (list-node-next first))
   (if (null? second) ; last is also first
     (head! plst '())
     (list-node-next! (iter-from-head-until plst (lambda (last) (not (has-next? plst last)))) '())))
 
 (define (length plst)
   (let length-iter
     ((curr (head plst))
      (size 0))
     (if (null? curr)
       size
       (length-iter (list-node-next curr) (+ size 1)))))
 
 (define (full? plst)
   #f)
 
 (define (empty? plst)
   (null? (head plst)))
 
 (define (first plst)
   (if (null? (head plst))
     (error "list empty (first)" plst)
     (head plst)))
 
 (define (last plst)
   (if (null? (head plst))
     (error "list empty (last)" plst)
     (iter-from-head-until plst null?)))
 
 (define (has-next? plst pos)
   (not (null? (list-node-next pos))))
 
 (define (has-previous? plst pos)
   (not (eq? pos (head plst))))
 
 (define (next plst pos)
   (if (not (has-next? plst pos))
     (error "list has no next (next)" plst)
     (list-node-next pos)))
 
 (define (previous plst pos)
   (if (not (has-previous? plst pos))
     (error "list has no previous (previous)" plst)
     (iter-from-head-until plst (lambda (node) (eq? pos node)))))
 
 (define (update! plst pos val)
   (list-node-val! pos val)
   plst)
 
 (define (peek plst pos)
   (list-node-val pos)))