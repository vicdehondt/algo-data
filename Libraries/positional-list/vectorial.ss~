#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                   Vectorial Positional Lists                    *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library 
 (vector-positional-list)
 (export new positional-list-tag equality
         attach-first! attach-last! attach-middle!
         detach-first! detach-last! detach-middle!
         length empty? full? update! peek
         first last has-next? has-previous? next previous)
 (import (except (rnrs base (6)) length)
         (rnrs control (6))
         (rnrs mutable-pairs))
 
 (define positional-list-tag 'vectorial-list)
 (define positional-list-size 10)
 (define (make first-free size ==?)         
   (list positional-list-tag first-free (make-vector size) ==?))
 (define (storage plst)
   (caddr plst))
 (define (storage! plst vector)
   (set-car! (cddr plst) vector))
 (define (size plst)
   (cadr plst))
 (define (size! plst s)
   (set-car! (cdr plst) s))
 (define (equality plst)
   (cadddr plst))

 (define (new ==?)
   (make 0 positional-list-size ==?))

 (define (storage-move-right vector i j)
   (do ((idx j (- idx 1)))
     ((< idx i))
     (vector-set! vector (+ idx 1) (vector-ref vector idx))))

 (define (storage-move-left vector i j)
   (do ((idx i (+ idx 1)))
     ((> idx j))
     (vector-set! vector (- idx 1) (vector-ref vector idx))))
 
 (define (attach-first! plst val)
   (attach-middle! plst val -1))

 (define (attach-middle! plst val pos)
   (define list-storage (storage plst))
   (define first-free (size plst))
   (storage-move-right list-storage (+ pos 1) (- first-free 1))
   (vector-set! list-storage (+ pos 1) val)
   (size! plst (+ first-free 1)))

 (define (attach-last! plst val)
   (define list-storage (storage plst))
   (define first-free (size plst))
   (vector-set! list-storage first-free val)
   (size! plst (+ first-free 1)))
 
 (define (detach-first! plst)
   (detach-middle! plst 0))
 
 (define (detach-last! plst pos)
   (define first-free (size plst))
   (size! plst (- first-free 1)))
 
 (define (detach-middle! plst pos)
   (define list-storage (storage plst))
   (define first-free (size plst))
   (storage-move-left list-storage (+ pos 1) (- first-free 1))
   (size! plst (- first-free 1)))
 
 (define (length plst)
   (size plst))
 
 (define (empty? plst)
   (= 0 (size plst)))
 
 (define (full? plst)
   (= (size plst)
      (vector-length (storage plst))))
 
 (define (first plst)
   (if (= 0 (size plst))
     (error "empty list (first)" plst)
     0))
 
 (define (last plst)
   (if (= 0 (size plst))
     (error "empty list (last)" plst)
     (- (size plst) 1)))
 
 (define (has-next? plst pos)
   (< (+ pos 1) (size plst)))
 
 (define (has-previous? plst pos)
   (< 0 pos))
 
 (define (next plst pos)
   (if (not (has-next? plst pos))
     (error "list has no next (next)" plst)
     (+ pos 1)))
 
 (define (previous plst pos)
   (if (not (has-previous? plst pos))
     (error "list has no previous (previous)" plst)
     (- pos 1)))
 
 (define (peek plst pos)
   (if (> pos (size plst))
     (error "illegal position (peek)" plst)
     (vector-ref (storage plst) pos)))
 
 (define (update! plst pos val)
   (if (> pos (size plst))
     (error "illegal position (update!)" plst)
     (vector-set! (storage plst) pos val))))