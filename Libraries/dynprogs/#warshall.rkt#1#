#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 7 #"Monaco\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 90 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 971 0 30 3 10 #"#lang r7rs"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 6 #"import"
0 0 26 3 2 #" ("
0 0 14 3 6 #"scheme"
0 0 26 3 1 #" "
0 0 14 3 4 #"base"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"scheme"
0 0 26 3 1 #" "
0 0 14 3 5 #"write"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 5 #"graph"
0 0 26 3 1 #" "
0 0 14 3 10 #"unweighted"
0 0 26 3 1 #" "
0 0 14 3 6 #"config"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 5 #"graph"
0 0 26 3 1 #" "
0 0 14 3 8 #"examples"
0 0 26 3 1 #" "
0 0 14 3 19 #"directed-unweighted"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 12 #"scheme-tools"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 16 #"graph-algorithms"
0 0 26 3 1 #" "
0 0 14 3 8 #"directed"
0 0 26 3 1 #" "
0 0 14 3 17 #"traclo-unweighted"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 16 #"graph-algorithms"
0 0 26 3 1 #" "
0 0 14 3 8 #"directed"
0 0 26 3 1 #" "
0 0 14 3 5 #"basic"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 6 #"prefix"
0 0 26 3 1 #" "
0 0 14 3 2 #"s:"
0 0 26 3 2 #" ("
0 0 14 3 3 #"a-d"
0 0 26 3 1 #" "
0 0 14 3 5 #"stack"
0 0 26 3 1 #" "
0 0 14 3 6 #"linked"
0 0 26 3 4 #") ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 127
(
 #"; In deze file \"distilleer\" ik het Warshall algoritme (= dynamic p"
 #"rogramming) uit een makkelijk maar naief-recursieve algoritme"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"g0"
0 0 26 3 1 #" "
0 0 14 3 12 #"sedgewick172"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"g1"
0 0 26 3 2 #" ("
0 0 14 3 4 #"copy"
0 0 26 3 1 #" "
0 0 14 3 2 #"g0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"g2"
0 0 26 3 2 #" ("
0 0 14 3 4 #"copy"
0 0 26 3 1 #" "
0 0 14 3 2 #"g1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"g3"
0 0 26 3 2 #" ("
0 0 14 3 4 #"copy"
0 0 26 3 1 #" "
0 0 14 3 2 #"g2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 29 #"; Poging 1 : Naief algoritme:"
0 0 26 29 1 #"\n"
0 0 17 3 129
(
 #";   - we vallen de graf recursief aan door telkens minder knopen op "
 #"het pad tot te laten als tussenliggende knope. Van n-1 tot 0."
) 0 0 26 29 1 #"\n"
0 0 17 3 124
(
 #";   - een pad dat knopen 0 tot via mag gebruiken gaat ofwel langs vi"
 #"a (t.t.z. van from naar via en via naar toe) ofwel niet."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"and2"
0 0 26 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #") ("
0 0 14 3 3 #"and"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"or2"
0 0 26 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #") ("
0 0 14 3 2 #"or"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 1 #"y"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"traclo-recursive"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 5 #"order"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-2D-vector"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 2 #") "
0 0 22 3 1 #"'"
0 0 26 3 5 #"())))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #") ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 7 #"\"troem\""
0 0 26 3 3 #") ("
0 0 14 3 3 #"ij!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 17 3 30 #"; (display (list from to via))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 22 3 2 #"-1"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 9 #"adjacent?"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"or2"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 14 #"             ("
0 0 14 3 4 #"and2"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 20 #"                   ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 2 #"  "
0 0 14 3 2 #"to"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"from"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 14 3 3 #"res"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 131
(
 #"; Poging 2 : Memoizen van bovenstaand algoritme. We zien in dat vele"
 #" recursieve aanroepen van rec heel dikwijls hetzelfde gaan doe."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 14 #"traclo-memoize"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 14 3 5 #"order"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #") ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 7 #"\"troem\""
0 0 26 3 3 #") ("
0 0 14 3 3 #"ij!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-2D-vector"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 3 #") ("
0 0 14 3 9 #"adjacent?"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 6 #"))))  "
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"ij?"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 26 3 3 #" (("
0 0 14 3 3 #"tst"
0 0 26 3 2 #" ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 22 3 2 #"-1"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 9 #"adjacent?"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 24 #"                       ("
0 0 14 3 3 #"or2"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 29 #"                            ("
0 0 14 3 4 #"and2"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 35 #"                                  ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 2 #"  "
0 0 14 3 2 #"to"
0 0 26 3 3 #"  ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #" "
0 0 14 3 3 #"tst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 3 #"tst"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"ij?"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"from"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"     ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #" ("
0 0 15 3 3 #"rec"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 2 #" ("
0 0 14 3 1 #"-"
0 0 26 3 1 #" "
0 0 14 3 1 #"n"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 2 #"  "
0 0 14 3 3 #"res"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 131
(
 #"; Poging 3 : De gememoizede versie bestaat uit het constant vermijde"
 #"n van de boomrecursie. Wat reeds gedaan is doen we geen 2 keer."
) 0 0 26 29 1 #"\n"
0 0 17 3 114
(
 #"; Dus kunnen we de recursie \"binnenste buiten draaien\" en een bott"
 #"om-up iteratie doen i.p.v. een top-down recursie"
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 2 #" ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 16 #"traclo-warshall2"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 2 #" ("
0 0 14 3 14 #"make-2D-vector"
0 0 26 3 2 #" ("
0 0 14 3 5 #"order"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 3 #") ("
0 0 14 3 5 #"order"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 3 #") ("
0 0 14 3 9 #"adjacent?"
0 0 26 3 1 #" "
0 0 14 3 1 #"g"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 26 3 2 #" ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #") ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 22 3 1 #"0"
0 0 26 3 3 #") ("
0 0 14 3 1 #"="
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 22 3 1 #"1"
0 0 26 3 4 #")) ("
0 0 14 3 7 #"display"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 3 #") ("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 7 #"\"troem\""
0 0 26 3 3 #") ("
0 0 14 3 3 #"ij!"
0 0 26 3 1 #" "
0 0 14 3 1 #"v"
0 0 26 3 1 #" "
0 0 14 3 1 #"i"
0 0 26 3 1 #" "
0 0 14 3 1 #"j"
0 0 26 3 1 #" "
0 0 14 3 1 #"a"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"   ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"       "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"       ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"from"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 13 #"for-each-node"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"          "
0 0 14 3 1 #"g"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 15 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"or2"
0 0 26 3 2 #" ("
0 0 14 3 3 #"ij?"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 21 #"                    ("
0 0 14 3 4 #"and2"
0 0 26 3 2 #" ("
0 0 14 3 3 #"ij?"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 26 #"                         ("
0 0 14 3 3 #"ij?"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 3 #"via"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 17 #"                ("
0 0 14 3 4 #"ij2!"
0 0 26 3 1 #" "
0 0 14 3 3 #"res"
0 0 26 3 1 #" "
0 0 14 3 4 #"from"
0 0 26 3 1 #" "
0 0 14 3 2 #"to"
0 0 26 3 1 #" "
0 0 22 3 2 #"#t"
0 0 26 3 8 #"))))))))"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"   "
0 0 14 3 3 #"res"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 17 3 122
(
 #"; Poging 4 = In bovenstaand algoritme leveren we een 2D matrix op; i"
 #"n Het algoritme van de cursus leveren we een graag op."
) 0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"m0"
0 0 26 3 2 #" ("
0 0 14 3 16 #"traclo-recursive"
0 0 26 3 1 #" "
0 0 14 3 2 #"g0"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 2 #"m0"
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 24 #"\"----------------------\""
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"m1"
0 0 26 3 2 #" ("
0 0 14 3 14 #"traclo-memoize"
0 0 26 3 3 #"   "
0 0 14 3 2 #"g1"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 2 #"m1"
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 24 #"\"----------------------\""
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"m2"
0 0 26 3 2 #" ("
0 0 14 3 16 #"traclo-warshall2"
0 0 26 3 2 #"  "
0 0 14 3 2 #"g2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 2 #"m2"
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 19 3 24 #"\"----------------------\""
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 15 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 2 #"m3"
0 0 26 3 2 #" ("
0 0 14 3 15 #"traclo-warshall"
0 0 26 3 2 #"  "
0 0 14 3 2 #"g3"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 14 3 7 #"display"
0 0 26 3 1 #" "
0 0 14 3 2 #"m3"
0 0 26 3 2 #")("
0 0 14 3 7 #"newline"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0           0
