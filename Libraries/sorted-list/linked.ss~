#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*              Sorted Lists (Linked Implementation)               *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                   2009  Software Languages Lab                  *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (linked-sorted-list)
 (export new from-scheme-list sorted-list? empty? full? length
         find! delete! add! peek
         set-current-to-first! set-current-to-next! has-current? current-has-next?)
 (import (except (rnrs base (6)) length)
         (rnrs mutable-pairs))
 
 (define sorted-list-tag 'linked-sorted-list)
 
 (define (make-list-node val next)
   (cons val next))
 (define (list-node-val node)
   (car node))
 (define (list-node-val! node val)
   (set-car! node val))
 (define (list-node-next node)
   (cdr node))
 (define (list-node-next! node next)
   (set-cdr! node next))
 
 (define (make <<? ==?)
   (list sorted-list-tag 0 '() '() <<? ==?)) ; current first
 (define (size slst)
   (cadr slst))
 (define (size! slst s)
   (set-car! (cdr slst) s))
 (define (head slst)
   (cadddr slst)) 
 (define (head! slst node)
   (set-car! (cdddr slst) node))
 (define (current slst)
   (caddr slst))
 (define (current! slst node)
   (set-car! (cddr slst) node))
 (define (lesser slst)
   (cadr (cdddr slst)))
 (define (equality slst)
   (caddr (cdddr slst)))
 
 (define (new <<? ==?)
   (make <<? ==?))
 
 (define (from-scheme-list slst <<? ==?)
   (letrec
       ((list-iter
         (lambda (lst)
           (if (null? lst)
             (new <<? ==?)
             (add! (list-iter (cdr lst)) (car lst))))))
     (list-iter slst)))
 
 (define (sorted-list? any)
   (and (pair? any)
        (eq? (car any) sorted-list-tag)))
 
 (define (length slst)
   (size slst))
 
 (define (empty? slst)
   (= (size slst) 0))
 
 (define (full? slst)
   #f)
 
 (define (find! slst key)
   (define ==? (equality slst))
   (define <<? (lesser slst))
   (define (list-iter node)
     (cond
       ((null? node) 
        (current! slst '()))
       ((==? key (list-node-val node))
        (current! slst node))
       ((<<? (list-node-val node) key)
        (list-iter (list-node-next node)))
       (else 
        (current! slst '()))))
   (list-iter (head slst)))
 
 (define (delete! slst)
   (define first (head slst))
   (define curr (current slst))
   (define (iter-to-previous prev next! next)
     (cond 
       ((eq? next curr)
        (next! prev (list-node-next next)))
       (else 
        (iter-to-previous 
         next list-node-next! (list-node-next next)))))
   (if (not (has-current? slst))
     (error "no current (delete!)" slst))
   (iter-to-previous 
    '() 
    (lambda (ignore node) (head! slst node)) 
    (head slst))
   (size! slst (- (size slst) 1))
   (current! slst '())
   slst)
 
 (define (peek slst)
   (if (not (has-current? slst))
     (error "no current (peek)" slst)
     (list-node-val (current slst))))
 
 (define (add! slst val)
   (define ==? (equality slst))
   (define <<? (lesser slst))
   (define (insert-node prev next! next)
     (let ((node (make-list-node val next)))
       (current! slst node)
       (next! prev node)))
   (define (iter-to-position prev next! next)
     (cond
       ((or (null? next)
            (<<? val (list-node-val next)))
        (insert-node prev next! next))
       (else
        (iter-to-position next list-node-next! (list-node-next next)))))
   (iter-to-position
    '()
    (lambda (ignore node) (head! slst node))
    (head slst))
   (size! slst (+ (length slst) 1))
   slst)
 
 (define (set-current-to-first! slst)
   (current! slst (head slst)))
 
 (define (set-current-to-next! slst)
   (if (not (has-current? slst))
     (error "current has no meaningful value (set-current-to-next!" slst)
     (current! slst (list-node-next (current slst)))))
 
 (define (has-current? slst)
   (not (null? (current slst))))
 
 (define (current-has-next? slst)
   (if (not (has-current? slst))
     (error "no Current (current-has-next?" slst)
     (not (null? (list-node-next (current slst)))))))
 