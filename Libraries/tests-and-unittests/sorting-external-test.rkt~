#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                      External Sorting Test                      *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                   2010  Software Languages Lab                  *-*-
;-*-*                    Vrije Universiteit Brussel                   *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(import (prefix (a-d disk disk) disk:)
        (prefix (a-d disk file-system) fs:)
        (prefix (a-d file sequential input-file) in:)
        (prefix (a-d file sequential output-file) out:)
        (prefix (a-d sorting external inputfile-with-counted-runs) ifcr:)
        (prefix (a-d sorting external outputfile-with-counted-runs) ofcr:)
        (prefix (a-d sorting external outputfile-with-varying-runs) ofvr:)
        (prefix (a-d sorting external inputfile-with-varying-runs) ifvr:)
        (prefix (a-d sorting external multiway-merge-sort) mws:)
        (prefix (a-d sorting external polyphase-sort) pfs:)
        (prefix (a-d sorting external p-polyphase-sort-exp) npfs:)
        (rnrs base)
        (rnrs control)
        (rnrs io simple)
        (a-d scheme-tools))

(define dsk (disk:new "testdisk"))
(fs:format! dsk)

(define d (list 1099 1124 1153 1286 1291 1340 1408 1412 1475 1498
                1704 1832 1929 2001 2030 2038 2151 2254 2287 2405
                2436 2481 2562 2595 2630 2660 2671 2734 2770 2867
                2881 2901 3060 3068 3108 3234 3325 3437 3464 3507 
                3530 3588 3629 3811 3917 4010 4144 4151 4176 4215 
                4297 4568 4572 4645 4855 5004 5012 5067 5204 5238 
                5238 5253 5257 5264 5469 5474 5504 5563 5704 5726
                5860 5865 5895 5923 5929 6013 6025 6145 6170 6402
                6533 6653 6657 6671 6684 6846 6920 6935 7036 7036
                7117 7185 7191 7201 7346 7431 7444 7505 7608 7668
                7687 7723 7752 7758 7775 7813 7952 7958 8029 8042
                8103 8129 8249 8259 8345 8433 8523 8525 8571 8633 
                8664 8684 8716 8753 8786 8849 8849 8907 8981 8985 
                9240 9402 9422 9455 9462 9482 9508 9632 9704 9765 
                9872 9877 9945))

(define d2 (list 9518 7179 2639 5891 3014 4963 4305 7814 9256 1289 9151 1382 4820 1003 2995 5659 4841 3238 3870 8166 
                 1693 4481 5373 4506 5758 5978 7067 5901 9378 5813 7428 9920 6575 8851 2635 5680 9132 6236 6689 8092 
                 3322 4064 7090 2591 8638 8381 7296 5655 5642 7908 5030 2286 6879 3124 8903 8775 6662 8815 1487 2599 
                 9180 5323 9841 8448 5752 7897 3099 3587 5685 2979 4971 3990 8023 9835 1260 2923 5636 9022 1474 3995 
                 6329 5304 6158 7205 2137 4104 1366 3432 5984 1943 9901 3989 3482 3865 4160 8842 9799 4093 1473 2755 
                 7187 4768 1179 1136 1140 4186 9093 6104 4424 1751 2603 6838 6647 2144 6425 5786 4725 3715 1529 7824 
                 4252 7617 4834 5743 6752 7160 8330 5398 6305 1052 6227 5096 1129 6554 4364 6889 7506 5864 2156 9292 
                 3450 3431 7224 1693 8133 2454 7553 9066 7851 4890 7331 6923 1326 5402 8080 9365 8934 9655 9981 2360 
                 7296 1550 4552 4804 5928 7010 3867 8558 4176 7649 4945 4519 9552 1797 7574 2506 3202 1656 4237 1886 
                 7680 7230 4668 2074 6510 1681 1826 1172 4927 1228 6560 2565 4630 2738 6932 9009 4715 6363 3315 2893 
                 4775 1483 3197 4663 6108 6877 1289 5318 2028 9598 7753 7733 1426 5503 3660 1040 1897 1272 7573 8129 
                 7110 5034 1125 3815 6917 2501 9293 9583 1807 3000 4006 3629 5736 8116 6159 1873 6570 9956 2922 7623 
                 6755 5862 4778 9107 8599 7916 7157 9062 1597 3655 2138 3959 4774 1875 1118 8493 5484 1859 3115 9891 
                 5801 3490 7740 8889 5205 6914 2170 1879 4084 6862 3280 5962 1179 6944 1759 2443 6377 6122 2870 2851 
                 1514 2905 5523 3910 5220 7123 9733 3866 7711 7102 9916 6433 4936 3555 3172 9804 6029 8894 8866 5931 
                 1818 6561 1573 9144 4933 3600 8864 8974 6052 5278 9330 3977 4729 3878 9072 4180 2374 8683 1953 2857 
                 4983 3945 3089 2971 3936 4499 5229 5640 3783 9009 5073 6681 1047 1561 9663 7188 4816 7017 3970 5043 
                 5338 3666 9466 1603 4115 2021 9751 5508 8875 3902 4077 2289 3611 6576 4372 6940 1692 5685 7037 6634 
                 8344 1027 7324 6388 2371 5210 5834 5554 1736 2899 8972 9919 1192 4361 5088 7879 7939 2447 4109 4050 
                 2207 9481 8424 5066 4482 1099 4556 6513 6036 6135 8261 5718 3177 6089 5821 7099 8129 4853 4725 6250 
                 3055 4766 1406 7965 2905 3991 9984 6866 6135 8112 9455 2101 5207 1393 4206 8359 2236 1872 8748 8319 
                 5322 2405 8199 6234 4722 3509 9414 4600 9026 5230 5496 9670 8506 7950 2905 8070 8263 8189 3188 9496 
                 4064 1494 6556 9692 5487 5395 7320 2701 9920 8827 1487 8736 5148 2431 9225 6354 3400 8633 1557 9784 
                 9991 5037 6353 9818 3718 6322 8957 3836 5575 4524 8672 4535 8484 5862 8916 4492 3478 6014 8499 1668 
                 4266 5730 4796 2515 9192 9238 3908 8248 3279 6796 9767 4673 6240 2426 5524 1360 5798 4772 9797 9886 
                 1904 1620 7212 1652 5775 6387 4720 7287 4897 8105 6199 2177 6144 2441 6643 9451 6443 4163 7691 8185 
                 9524 1837 1278 8459 6163 7406 3618 4790 4563 1116 2684 5143 4175 4640 3888 9682 4998 4181 1101 1197 
                 9548 4200 1727 2125 5342 5010 1551 7887 2156 8998 9124 5826 5267 8153 7581 4515 1644 2277 8037 1324 
                 1947 2455 9923 7988 2164 3420 1640 2567 9006 1457 1364 5334 3318 7959 9426 2251 8667 4519 2069 1178 
                 9359 9220 2023 9906 9580 3466 7064 3128 8991 6718 7421 7325 8432 9615 7421 1835 5069 4597 5324 1699 
                 6370 6504 3667 2993 5718 5968 3762 6711 1195 7148 9937 7935 7576 4177 2537 5709 8086 1166 7818 6640 
                 2182 3872 9120 8508 6912 5316 1148 5655 8362 5866 7451 5775 1722 1774 5192 8803 8069 8800 5149 3326 
                 5781 4017 6536 6922 2185 2592 4826 2991 4527 3267 6075 3807 6175 3953 2216 4479 3005 5684 5642 1125 
                 8736 4293 8825 9881 1096 3968 9982 1726 8876 2535 7793 1880 9006 9772 9438 1449 5082 2682 5522 8219 
                 6367 6487 8330 8299 8729 9546 9627 9786 9020 1569 1443 9962 8403 2382 1663 2629 7301 1245 7572 2467 
                 5672 9221 2388 7515 5055 8023 5426 8969 7173 3059 4956 6003 2586 5993 3386 1663 4923 7597 8515 1292 
                 5180 7139 2461 6409 6795 3917 5972 5688 3953 6708 3813 7066 6855 4518 2112 6839 6575 4222 8305 5527 
                 8770 6910 6620 9041 1507 2737 6699 8146 6871 4067 3405 2662 9776 1730 8585 9866 3228 6602 6054 2994 
                 7102 1183 3634 8278 1425 3419 1885 8293 5845 7708 1968 2252 1405 5123 5789 8220 7789 5627 4601 2506 
                 7196 7528 6457 4292 9985 4525 2133 4213 6500 6917 1507 5540 1548 4492 9341 3277 2509 7585 2926 1849 
                 4280 8496 9226 7817 9446 7172 2144 7370 3189 8558 6939 5741 1825 4483 1554 6815 2700 2608 4209 7687 
                 9529 4740 7954 8001 7658 4359 1144 4753 7020 4770 9931 3751 9389 2968 5600 5457 5241 9903 4371 6390 
                 9671 8738 7756 8700 3336 3975 1291 1943 7155 2550 1059 2643 2691 7701 8381 5788 7546 3147 9530 7642 
                 3617 1701 4898 4116 2309 3309 5663 4997 5803 6777 5926 8170 2488 8512 5797 5250 5491 2973 1284 3306 
                 1537 8719 3291 4664 5876 3240 8477 6562 7029 5404 6123 4100 5135 1028 4109 5640 6671 9262 3200 1171 
                 6931 4770 4746 6430 4851 6647 1818 7443 5501 6462 1514 4739 5537 9401 4550 4231 4346 2497 1270 9934 
                 8192 1648 3944 1527 6043 5870 9942 7675 3250 6958 5483 8043 3007 4081 7275 7822 8113 9694 4746 5396 
                 3727 7223 9450 5544 7298 9512 2272 8999 3650 2886 6686 4257 8917 8643 4300 4877 6009 2740 8268 5527 
                 5605 1167 4646 7217 2090 2984 5535 7141 7421 4992 9898 5145 2722 2549 3133 2551 7152 7186 9052 1760 
                 8298 5042 6528 6748 4833 4952 3611 3069 6586 7249 9785 9658 1422 4559 6794 4911 3232 2095 6923 6112 
                 6557 3792 4674 7881 4058 6176 7291 4964 7835 3571 7668 9086 7568 7374 8996 1125 8307 6338 7585 3445 
                 6715 2900 5194 1872 6031 5820 4894 3096 3303 3286 4289 1773 5193 5975 9038 1800 5212 2181 3921 2952 
                 3134 5862 1829 3352 5679 5807 8285 9200 3263 5087 8552 4483 5963 1440 8202 1206 9228 1180 8565 7073 
                 4725 1597 9584 2981 6424 3477 2845 9807 8946 5774 6019 1975 3370 6628 9318 8227 6547 5274 1794 7466 
                 1990 8769 2330 1288 7533 2950 7084 3796 6597 4431 7466 1309 4196 9194 6986 7492 7895 8955 8241 1703 
                 9082 5441 5318 5632 7511))

(define (genlst n)
  (if (= n 0)
    ()
    (cons n (genlst (- n 1)))))

(define (dump name lst)
  (define (w-iter out lst)
    (out:write! out (car lst))
    (if (not (null? (cdr lst)))
        (w-iter out (cdr lst))))
  (define out (out:new dsk name))
  (w-iter out lst)
  out)
(define (coll name)
  (define (coll-rec in)
    (cons (in:read in) (if (in:has-more? in)
                           (coll-rec in)
                           ())))
  (define in (in:open-read! dsk name))
  (define res (coll-rec in))
  (in:close-read! in)
  (in:delete! in)
  res)
(define (print name)
  (define (p-iter in)
    (display (in:read in))(display " " )
    (if (in:has-more? in)
        (p-iter in)))
  (define in (in:open-read! dsk name))
  (p-iter in)
  (in:close-read! in))

(define (negate source dest el)
  (define length (vector-length source))
  (let binary-search
    ((left 0)
     (right (- length 1)))
    (if (<= left right)
        (let ((mid (div (+ left right 1) 2)))
          (cond
            ((eq? (vector-ref source mid) el)
             (vector-set! dest mid (- el)))
            ((< (vector-ref source mid) el)
             (binary-search (+ mid 1) right))
            (else
             (binary-search left (- mid 1))))))))

(define (m lst)
  (define disks (vector (disk:new "d0") (disk:new "d1") (disk:new "d2") (disk:new "d3") (disk:new "d4") (disk:new "d5")))
  (define ignore (vector-for-each (lambda (d) (fs:format! d)) disks))
  (define f (dump "f" lst))
  (out:reread! f)
  (mws:sort! f disks <)
  (let* ((res (coll "f"))
         (vct (list->vector res))
         (check (make-vector (vector-length vct) 0)))
    (display (list "ORIG LENGTH" (length lst)))
    (newline)
    (display (list "NEW LENGTH" (length res)))
    (newline)
    (map (lambda (e) (negate vct check e)) lst)
    (display check)))

(define (p lst)
  (define disks (vector (disk:new "d0") (disk:new "d1") (disk:new "d2")))
  (define ignore (vector-for-each (lambda (d) (fs:format! d)) disks))
  (define f (dump "f" lst))
  (out:reread! f)
  (pfs:sort! f disks < 9999)
  (let* ((res (coll "f"))
         (vct (list->vector res))
         (check (make-vector (vector-length vct) 0)))
    (display (list "ORIG LENGTH" (length lst)))
    (newline)
    (display (list "NEW LENGTH" (length res)))
    (newline)
    (map (lambda (e) (negate vct check e)) res)
    (display check)))

(define (np lst)
  (define disks (vector (disk:new "d0") (disk:new "d1") (disk:new "d2") (disk:new "d3") (disk:new "d4") (disk:new "d5")))
  (define ignore (vector-for-each (lambda (d) (fs:format! d)) disks))
  (define f (dump "f" lst))
  (out:reread! f)
  
  (let* ((aan (npfs:sort! f disks <))
         (res (coll "f"))
         (vct (list->vector res))
         (check (make-vector (vector-length vct) 0)))
    (display (list "ORIG LENGTH" (length lst)))
    (newline)
    (display (list "NEW LENGTH" (length res)))
    (newline)
    (map (lambda (e) (negate vct check e)) res)
    (display check)
    aan))

(define (pp p lst)
  (define disks (make-vector p))
  (do ((i 0 (+ i 1)))
    ((= i p))
    (vector-set! disks i (disk:new "dd"))
    (fs:format! (vector-ref disks i)))
  (let ((f (dump "f" lst)))
    (out:reread! f)  
    (let* ((aan (npfs:sort! f disks <))
           (res (coll "f")))
      aan)))

(define (file lst)
  (define disk (disk:new "test"))
  (define f (dump "f" lst))
  (define f2 (print "f"))
  (display f2)
  (display (list (length f2) " in total"))) 

(define (experiment n p)
  (define data (genlst (* 10 n))) ;# on a run = 10
  (define aantal 0)
  (define metingen (make-vector (- p 3) 0))
  (display (list "begin expt with" metingen)) (newline)
  (do ((i 3 (+ i 1)))
    ((>= i p) metingen)
    (display (list "experiment p=" i "for S=" n "runs"))(newline)
    (vector-set! metingen (- i 3) (/ (pp i data) (* 10 n)))))