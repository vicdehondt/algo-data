#lang r6rs

(import (rnrs base)
        (rnrs io simple)
        (only (scheme base) require planet)
        ;(a-d disjoint-sets naive)
        ;(a-d disjoint-sets up-tree)
        (a-d disjoint-sets optimized)
        (prefix (a-d disjoint-sets maze-application) maze:))

(require (planet schematics/schemeunit:3/test))

(define d (new 10))
(check-equal? (find d 1) 1)
(check-equal? (find d 5) 5)
(check-equal? (find d 2) 2)
(check-equal? (find d 6) 6)
(union! d (find d 1) (find d 5))
(check-equal? (find d 1) (find d 5))
(check-not-equal? (find d 2) (find d 6))
(union! d (find d 2) (find d 6))
(check-equal? (find d 1) (find d 5))
(check-equal? (find d 2) (find d 6))
(check-not-equal? (find d 2) (find d 5))
(check-not-equal? (find d 1) (find d 6))
(union! d (find d 2) (find d 5))
(check-equal? (find d 1) (find d 5))
(check-equal? (find d 5) (find d 2))
(check-equal? (find d 2) (find d 6))

(define (do-it)
  (define m (maze:new 5))
  (maze:generate! m)
  (maze:print m)
  (display (maze:exit m)))