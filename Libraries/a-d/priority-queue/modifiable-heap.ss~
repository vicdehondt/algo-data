#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*         Priority Queues (Modifiable Heap Implementation)        *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universitent Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (priority-queue)
 (export new priority-queue? enqueue! reschedule! peek serve! full? empty? priority-of)
 (import (rnrs base (6))
         (rnrs mutable-pairs)
         (prefix (a-d heap modifiable) heap:))
 
 (define pq-item-make cons)
 (define pq-item-val car)
 (define pq-item-priority cdr)
 (define pq-item-priority! set-cdr!)
 
 (define (pq-item-specialize-for-priorities func)
   (lambda (item1 item2)
     (func (pq-item-priority item1)
           (pq-item-priority item2))))
 
 (define pq-tag 'heap-pq)
 (define (make capacity >>?)
   (list pq-tag (heap:new capacity >>?)))
 (define (heap pq)
   (cadr pq))
 
 (define (new capacity >>?)
   (make capacity (pq-item-specialize-for-priorities >>?)))
 
 (define (priority-queue? any)
   (and (pair? any)
        (eq? (car any) pq-tag)))
 
 (define (empty? pq)
   (heap:empty? (heap pq)))
 
 (define (full? pq)
   (heap:full? (heap pq)))
 
 (define (serve! pq notify)
   (if (empty? pq)
     (error "empty priority Queue (serve!)" pq))
   (heap:delete! (heap pq) 
                 (lambda (idx item)
                   (notify 
                    idx
                    (pq-item-val item)
                    (pq-item-priority item)))))
 
 (define (peek pq)
   (if (empty? pq)
     (error "empty priority queue (peek)" pq)
     (heap:peek (heap pq))))
 
 (define (enqueue! pq value priority notify)
   (heap:insert! (heap pq)
                 (pq-item-make value priority) 
                 (lambda (idx item)
                   (notify
                    idx
                    (pq-item-val item)
                    (pq-item-priority item))))
   pq)
 
 (define (reschedule! pq index new-priority notify)
   (define h (heap pq))
   (define pq-item (heap:peek-at h index))
   (pq-item-priority! pq-item new-priority)
   (heap:touch-at! h
                   index (lambda (idx item)
                           (notify 
                            idx
                            (pq-item-val item)
                            (pq-item-priority item)))))
 
 (define (priority-of pq index)
   (define h (heap pq))
   (pq-item-priority (heap:peek-at h index))))