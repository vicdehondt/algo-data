;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*          Priority Queues (Sorted List Implementation)           *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

#lang r6rs

(library
 (priority-queue)
 (export new priority-queue? enqueue! serve! peek full? empty?)
 (import (except (rnrs base) list)
         (prefix (a-d sorted-list linked) slist:))
 
 (define pq-item-make cons)
 (define pq-item-val car)
 (define pq-item-priority cdr)
 (define (pq-item-specialize-for-priorities func)
   (lambda (item1 item2)
     (func (pq-item-priority item1)
           (pq-item-priority item2))))
 
 (define pq-tag 'sorted-list-pq)
 (define (make >>?)
   (cons pq-tag 
         (slist:new (pq-item-specialize-for-priorities >>?)
                    (pq-item-specialize-for-priorities eq?))))
 (define (slist pq)
   (cdr pq))
 
 (define (new >>?)
   (make >>?))
 
 (define (priority-queue? any)
   (and (pair? any) 
        (eq? (car any) pq-tag)))
 
 (define (empty? pq)
   (slist:empty? (slist pq)))
 
 (define (full? pq)
   (slist:full? (slist pq)))
 
 (define (enqueue! pq val pty)
   (slist:add! (slist pq) (pq-item-make val pty))
   pq)
 
 (define (serve! pq)
   (define slst (slist pq))
   (if (empty? pq)
     (error "empty priority queue (serve!)" pq))
   (slist:set-current-to-first! slst)
   (let ((served-item (slist:peek slst)))
     (slist:delete! slst)
     (pq-item-val served-item)))
 
 (define (peek pq)
   (define slst (slist pq))
   (if (empty? pq)
     (error "empty priority queue (peek)" pq))
   (slist:set-current-to-first! slst)
   (pq-item-val (slist:peek slst))))