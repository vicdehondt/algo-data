#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*               Lists With Current (Linked Version)               *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (list-with-current)
 (export new from-scheme-list list-with-current? 
         length empty? full? map
         set-current-to-first! set-current-to-last! current-has-next? current-has-previous?
         set-current-to-next! set-current-to-previous! has-current?
         add-after! add-before! delete! update! peek find!)
 (import (except (rnrs base (6)) length map)
         (rnrs mutable-pairs))
 
 (define (make-list-node val prev next)
   (cons val (cons prev next)))
 (define (list-node-val node)
   (car node))
 (define (list-node-val! node val)
   (set-car! node val))
 (define (list-node-next node)
   (cddr node))
 (define (list-node-next! node next)
   (set-cdr! (cdr node) next))
 (define (list-node-prev node)
   (cadr node))
 (define (list-node-prev! node prev)
   (set-car! (cdr node) prev))
 
 (define list-with-current-tag 'linked-list-with-current) 
 (define (make size first last current ==?)
   (list list-with-current-tag size first last current ==?))
 (define (size llwc)
   (cadr llwc))
 (define (size! llwc size)
   (set-car! (cdr llwc) size))
 (define (head llwc)
   (caddr llwc))
 (define (head! llwc node)
   (set-car! (cddr llwc) node))
 (define (rear llwc)
   (cadddr llwc))
 (define (rear! llwc node)
   (set-car! (cdddr llwc) node))
 (define (current llwc)
   (caddr (cddr llwc)))
 (define (current! llwc node)
   (set-car! (cddddr llwc) node))
 (define (equality llwc)
   (cadr (cddddr llwc)))
 (define (equality! llwc ==?)
   (set-car! (cdr (cddddr llwc)) ==?))
 
 (define (new ==?)
   (make 0 '() '() '() ==?))
 
 (define (from-scheme-list slst ==?)
   (define result (make 0 '() '() '() ==?))
   (if (not (null? slst))
     (let ((first (make-list-node (car slst) '() '())))
       (head! result first)
       (size! result 1)
       (rear!
        result
        (let loop
          ((scml (cdr slst))
           (curr first))
          (if (null? scml)
            curr
            (let ((node (make-list-node (car scml) curr '())))
              (list-node-next! curr node)
              (size! result (+ 1 (size result)))
              (loop (cdr scml) node)))))))
   result)
 
 (define (list-with-current? any)
   (and (pair? any)
        (eq? (car any) list-with-current-tag)))
 
 (define (length llwc)
   (size llwc))
 
 (define (full? llwc)
   #f)
 
 (define (empty? llwc)
   (null? (head llwc)))
 
 (define (map llwc func ==?)
   (if (empty? llwc)
     (new ==?)
     (let ((result (new ==?)))
       (set-current-to-first! llwc)
       (add-after! result (func (peek llwc)))
       (let loop
         ()
         (cond 
           ((current-has-next? llwc)
            (set-current-to-next! llwc)
            (add-after! result (func (peek llwc)))
            (loop))))
       result)))
  
 (define (foldl llwc oper zero)
   (define (foldl-iter accu nlst)
     (if (null? nlst)
       accu
       (foldl-iter (oper accu (list-node-val nlst)) (list-node-next nlst))))
   (foldl-iter zero (head llwc)))
 
 (define (foldr llwc oper zero)
   (define (inner-foldr nlst)
     (if (null? nlst)
       zero
       (oper (list-node-val nlst) (inner-foldr (list-node-next nlst)))))
   (inner-foldr (head llwc)))
 
 (define (set-current-to-first! llwc)
   (if (null? (head llwc))
     (error "list empty (set-current-to-first!)" llwc))
   (current! llwc (head llwc))
   llwc)
 
 (define (set-current-to-last! llwc)
   (if (null? (head llwc))
     (error "list empty (set-current-to-last!)" llwc))
   (current! llwc (rear llwc))
   llwc)
 
 (define (current-has-next? llwc)
   (if (null? (current llwc))
     (error "no current (current-has-next?)" llwc)
     (not (null? (list-node-next (current llwc))))))
 
 (define (current-has-previous? llwc)
   (if (null? (current llwc))
     (error "no current (current-has-previous?)" llwc))
   (not (null? (list-node-prev (current llwc)))))
 
 (define (set-current-to-next! llwc)
   (if (not (current-has-next? llwc))
     (error "current has no next (set-current-to-next!)" llwc))
   (current!
    llwc 
    (list-node-next (current llwc)))
   llwc)
 
 (define (set-current-to-previous! llwc)
   (if (not (current-has-previous? llwc))
     (error "current has no previous (set-current-to-previous!)" llwc))
   (current!
    llwc 
    (list-node-prev (current llwc)))
   llwc)
 
 (define (has-current? llwc)
   (not (null? (current llwc))))
 
 (define (find! llwc key)
   (define ==? (equality llwc))
   (define (iter-to-key node)
     (cond 
       ((null? node) 
        (current! llwc '()))
       ((==? (list-node-val node) key) 
        (current! llwc node))
       (else
        (iter-to-key (list-node-next node)))))
   (if (null? (head llwc))
     (current! llwc '())
     (iter-to-key (head llwc)))
   llwc)
 
 (define (update! llwc val)
   (if (null? (current llwc))
     (error "no current (update!)" llwc))
   (list-node-val! (current llwc) val)
   llwc)
 
 (define (peek llwc)
   (if (null? (current llwc))
     (error "no current (peek)" llwc))
   (list-node-val (current llwc)))
 
 (define (add-before! llwc val)
   (define curr (current llwc))
   (define node '())
   (if (and (null? curr)
            (not (null? (head llwc))))
     (error "no current (add-before!" llwc))
   (set! node (make-list-node val '() curr))
   (if (or (null? curr) (eq? (head llwc) curr))
     (head! llwc node)
     (list-node-next! (list-node-prev curr) node))
   (if (not (null? curr))
     (list-node-prev! curr node))
   (if (null? curr)
     (rear! llwc node)
     (list-node-prev! node (list-node-prev curr)))
   (current! llwc node)
   (size! llwc (+ (size llwc) 1))
   llwc)
 
 (define (add-after! llwc val)
   (define curr (current llwc))
   (define node '())
   (if (and (null? curr)
            (not (null? (head llwc))))
     (error "no meaningful value (add-after!" llwc))
   (set! node (make-list-node val curr '()))
   (if (null? curr)
     (head! llwc node)
     (list-node-next! node (list-node-next curr)))
   (if (or (null? curr) (eq? (rear llwc) curr))
     (rear! llwc node)
     (list-node-prev! (list-node-next curr) node))
   (if (not (null? curr))                                 
     (list-node-next! curr node))
   (current! llwc node)
   (size! llwc (+ (size llwc) 1))
   llwc)
 
 (define (delete! llwc)
   (define curr (current llwc))
   (if (null? curr)
     (error "no current (delete!)" llwc))
   (if (null? (list-node-prev curr)) ; remove first
     (head! llwc (list-node-next curr))
     (list-node-next! (list-node-prev curr) 
                      (list-node-next curr)))
   (if (null? (list-node-next curr)) ; remove last
     (rear! llwc (list-node-prev curr))
     (list-node-prev! (list-node-next curr)
                      (list-node-prev curr)))
   (size! llwc (- (size llwc) 1))
   (current! llwc (list-node-next curr))
   llwc))