#lang r6rs

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*           Best-fit Memory Manager (Storage Management)          *-*-
;-*-*                                                                 *-*-
;-*-*                Theo D'Hondt - Wolfgang De Meuter                *-*-
;-*-*              1993-2009 Programming Technology Lab               *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(library
 (best-fit-mm)
 (export null make-vector vector? vector-length vector-ref vector-set! vector-free 
         peek poke! make memory-size reset-free lowest-size insert-free address)
 (import  
  (rnrs control)
  (rename (except (rnrs base) vector? vector-length)
          (set! scheme:set!) (vector-set! scheme:vector-set!) (vector-ref scheme:vector-ref) (make-vector scheme:make-vector)))
 
 (define null '())
 (define lowest-size 5)
 
 (define memory-size 200)
 (define memory (scheme:make-vector memory-size null))
 
 (define (peek addr)
   (scheme:vector-ref memory addr))
 
 (define (poke! addr value)
   (scheme:vector-set! memory addr value))
 
 (define address-tree null)
 (define size-tree null)
 
 (define (size addr)
   (peek (+ addr 0)))
 
 (define (size! addr siz)
   (poke! (+ addr 0) siz))
 
 (define (size-left addr)
   (peek (+ addr 1)))
 
 (define (size-left! addr size-left)
   (poke! (+ addr 1) size-left))
 
 (define (size-right addr)
   (peek (+ addr 2)))
 
 (define (size-right! addr size-right)
   (poke! (+ addr 2) size-right))
 
 (define (address-left addr)
   (peek (+ addr 3)))
 
 (define (address-left! addr addr-left)
   (poke! (+ addr 3) addr-left))
 
 (define (address-right addr)
   (peek (+ addr 4)))
 
 (define (address-right! addr addr-right)
   (poke! (+ addr 4) addr-right))
 
 (define (find-address addr)
   (let lookup
     ((top address-tree))
     (cond 
       ((eq? top null)
        null)
       ((= top addr)
        top)
       ((> top addr)
        (lookup (address-left top)))
       (else
        (let ((try (lookup (address-right top))))
          (if (eq? try null)
            top
            try))))))
 
 (define (find-size req-size) 
   (let lookup 
     ((top size-tree))
     (cond 
       ((eq? top null)
        null)
       ((= (size top) req-size)
        top)
       ((< (size top) req-size)
        (lookup (size-right top)))
       (else 
        (let ((try (lookup (size-left top))))
          (if (eq? try null)
            top
            try))))))
 
 (define (insert-free addr siz)
   (define (insert-address top)
     (if (< top addr)
       (let 
           ((right (address-right top)))
         (if (eq? right null)
           (address-right! top addr)
           (insert-address right)))
       (let 
           ((left (address-left top)))
         (if (eq? left null)
           (address-left! top addr)
           (insert-address left)))))
   (define (insert-size top)
     (if (>= (size top) siz)
       (let 
           ((left (size-left top)))
         (if (eq? left null)
           (size-left! top addr)
           (insert-size left)))
       (let 
           ((right (size-right top)))
         (if (eq? right null)
           (size-right! top addr)
           (insert-size right)))))
   (size! addr siz)
   (address-left! addr null)
   (address-right! addr null)
   (size-left! addr null)
   (size-right! addr null)
   (if (eq? address-tree null)
     (scheme:set! address-tree addr)
     (insert-address address-tree))
   (if (eq? size-tree null)
     (scheme:set! size-tree addr)
     (insert-size size-tree)))
 
 (define (delete-free addr)
   (define siz (size addr))
   (define (delete-next-address node op)
     (cond
       ((eq? (address-right node) null)
        (op (address-left node))
        node)
       (else
        (delete-next-address (address-right node)
                             (lambda (ref) 
                               (address-right! node ref))))))
   (define (delete-address node op)
     (cond
       ((> addr node)
        (delete-address (address-right node)
                        (lambda (ref) 
                          (address-right! node ref))))
       ((< addr node)
        (delete-address (address-left node) 
                        (lambda (ref) 
                          (address-left! node ref))))
       ((eq? (address-left node) null)
        (op (address-right node)))
       ((eq? (address-right node) null)
        (op (address-left node)))
       (else
        (let
            ((hold (delete-next-address (address-left node) 
                                        (lambda (ref) 
                                          (address-left! node ref)))))
          (address-left! hold (address-left node))
          (address-right! hold (address-right node))
          (op hold)))))
   (define (delete-next-size node op)
     (cond
       ((eq? (size-left node) null)
        (op (size-right node))
        node)
       (else
        (delete-next-size (size-left node)
                          (lambda (ref) 
                            (size-left! node ref))))))
   (define (delete-size node op)
     (cond
       ((< siz (size node))
        (delete-size (size-left node)
                     (lambda (ref) 
                       (size-left! node ref))))
       ((> siz (size node))
        (delete-size (size-right node) 
                     (lambda (ref) 
                       (size-right! node ref))))
       ((not (= addr node))
        (delete-size (size-right node) 
                     (lambda (ref) 
                       (size-right! node ref))))
       ((eq? (size-left node) null)
        (op (size-right node)))
       ((eq? (size-right node) null)
        (op (size-left node)))
       (else
        (let
            ((hold (delete-next-size (size-right node) 
                                     (lambda (ref) 
                                       (size-right! node ref)))))
          (size-left! hold (size-left node))
          (size-right! hold (size-right node))
          (op hold)))))
   (delete-address address-tree (lambda (ref)
                                  (scheme:set! address-tree ref)))
   (delete-size size-tree (lambda (ref)
                            (scheme:set! size-tree ref))))
 
 (define (reset-free)
   (scheme:set! address-tree null)
   (scheme:set! size-tree   null))
 
 (define (initialize)
   (insert-free 0 memory-size))
 
 (define vector-tag 'vector) 
 
 (define (make vctr-addr)
   (cons vector-tag vctr-addr))
 
 (define (address vctr)
   (cdr vctr))
 
 (define (address+index vctr-addr index)
   (if (number? index)
     (if (negative? index)
       (error "index must be non-negative" index)
       (let
           ((size (- (peek vctr-addr) 1)))
         (if (>= index size)
           (error "index out of bounds" index)
           (+ vctr-addr index 1))))
     (error "index must numerical" index)))
 
 (define (make-vector size)
   (scheme:set! size (+ size 1))
   (if (< size lowest-size)
     (scheme:set! size lowest-size))
   (let
       ((hold-addr (find-size size))) 
     (if (eq? hold-addr null)
       null
       (let
           ((hold-size (peek hold-addr)))
         (delete-free hold-addr)
         (cond
           ((>= (- hold-size size) lowest-size)
            (insert-free (+ hold-addr size) (- hold-size size))
            (poke! hold-addr size))
           (else
            (poke! hold-addr hold-size)))
         (make hold-addr)))))
 
 (define (vector-free pointer)
   (define vctr-addr (address pointer))
   (define siz (peek vctr-addr))
   (let
       ((hold-addr (find-address (+ vctr-addr siz))))
     (if (not (eq? hold-addr null))
         (let
             ((hold-size (peek hold-addr)))
           (when (= hold-addr (+ vctr-addr siz))
             (delete-free hold-addr)
             (scheme:set! siz (+ siz hold-size))))))
   (let 
       ((hold-addr (find-address vctr-addr)))
     (if (not (eq? hold-addr null))
         (let
             ((hold-size (peek hold-addr)))
           (when (= (+ hold-addr hold-size) vctr-addr)
             (delete-free hold-addr)
             (scheme:set! vctr-addr hold-addr)
             (scheme:set! siz (+ siz hold-size))))))
   (insert-free vctr-addr siz))
 
 (define (vector? any)
   (and (pair? any)
        (eq? (car any) vector-tag)))
 
 (define (vector-ref pointer index)
   (define vctr-addr (address pointer))
   (peek (address+index vctr-addr index)))
 
 (define (vector-set! pointer index value)
   (define vctr-addr (address pointer))
   (poke! (address+index vctr-addr index) value))
 
 (define (vector-length pointer)
   (define vctr-addr (address pointer))
   (- (peek vctr-addr) 1))
 
  (initialize))