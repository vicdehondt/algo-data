;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                Disjoint Sets (Tree Implementation)              *-*-
;-*-*                                                                 *-*-
;-*-*                       Wolfgang De Meuter                        *-*-
;-*-*                 2008 Programming Technology Lab                 *-*-
;-*-*                   Vrije Universiteit Brussel                    *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                        Private Procedures                       *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(define @disjoint-set.tag 'disjoint-set)

(define (@disjoint-set.make size)
  (cons @disjoint-set.tag (make-vector size 0)))
 
(define (@disjoint-set.parents dset)
  (cdr dset))

;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
;-*-*                                                                 *-*-
;-*-*                        Public Procedures                        *-*-
;-*-*                                                                 *-*-
;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-

(define (disjoint-set.new size)
  (define node-sets (@disjoint-set.make size))
  (let all-singletons 
    ((i 0))
    (disjoint-set.singleton! node-sets i)
    (if (< (+ 1 i) size)
      (all-singletons (+ i 1))))
  node-sets)

(define (disjoint-set.disjoint-set? sobj)
  (and (pair? sobj)
       (eq? (car sobj) @disjoint-set.tag)))

(define (disjoint-set.singleton! dset nmbr)
  (define parents (@disjoint-set.parents dset))
  (vector-set! parents nmbr nmbr)
  dset)

(define (disjoint-set.find dset nmbr)
  (define parents (@disjoint-set.parents dset))
  (let find-rec
    ((elmt nmbr))
    (if (= elmt (vector-ref parents elmt))
      elmt
      (find-rec (vector-ref parents elmt)))))

(define (disjoint-set.union! dset set1 set2)
  (define parents (@disjoint-set.parents dset))
  (vector-set! parents set1 set2)
  dset)
